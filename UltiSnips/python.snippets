snippet f "String format" b
f'${0}'
endsnippet
snippet dt "Dictionary variable"
${1} = {
    ${0}
}
endsnippet

snippet dtp "Dictionary property"
'${1}' : ${0},
endsnippet

snippet cr "Copyright"
"""
    Copyright (C) 2022 by Ccob.
"""
endsnippet

snippet header "File header snippet"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
    Copyright (C) 2022 by Ccob.
"""
endsnippet

snippet entry "Entry file snippet"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys


def main() -> int:
    return 0


if __name__ == "__main__":
    sys.exit(main())
endsnippet

snippet aentry "Entry file snippet"
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import asyncio


async def main() -> None:
    pass


if __name__ == "__main__":
    asyncio.run(main())
endsnippet

# snippet adeff
# async def ${1:fname}(${2}):
#     ${0}
# endsnippet

snippet agrpcm
async def ${1:fname}(
    self,
    request: ${2:ReqeustType},
    context: ${3:grpc.aio.ServicerContext}
) -> ${4:ResponseType}:
    ${0}
endsnippet

snippet adeffm
async def ${1:mname}(
    self,
    ${2:arg}
) -> ${3}:
    ${0}
endsnippet

# New Function
snippet def
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${4}:
    """${3:docstring for $1}"""
    ${0}
endsnippet

snippet deff
def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${3}:
    ${0}
endsnippet

snippet adef
async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${4}:
    """${3:docstring for $1}"""
    ${0}
endsnippet

snippet adeff
async def ${1:fname}(${2:`indent('.') ? 'self' : ''`}) -> ${3}:
    ${0}
endsnippet

# New Method
snippet defi
def __init__(self, ${1:args}) -> ${2}:
    ${0}
endsnippet

snippet defm
def ${1:mname}(self, ${2:arg}) -> ${3}:
    ${0}
endsnippet

snippet adefm
async def ${1:mname}(self, ${2:arg}) -> ${3}:
    ${0}
endsnippet
